module com.haskforce.frege.lang.parser.FregeParser where

import com.haskforce.frege.bindings.Intellij
import com.haskforce.frege.lang.parser.Builder
import com.haskforce.frege.lang.parser.Tokens
import com.haskforce.frege.utils.Monad

--- Function to be called by Java code to implement the PsiParser
psiParse :: IElementType -> Mutable s PsiBuilder -> ST s (Mutable s ASTNode)
psiParse !root !psiBuilder = builder.run psiBuilder
 where
  builder = do
    markStart $ top >> markDone root
    getTreeBuilt

top = do
  parseModuleDecl
  consumeUntilEOF

parseModuleDecl = whenTokenIs (== ttMODULE) $ markStart $ do
  advanceLexer
  parseModulePackage
  parseModuleName
  expectTokenAdvance ttWHERE
  markDone ttMODULE_DECL

parseModulePackage = markStart $ do
  advanceWhile pred advanceLexer
  markDone ttMODULE_PACKAGE
 where
  pred = do
    x <- getTokenType
    y <- lookAhead 1
    return $ (x, y) == (ttIDENT, ttDOT)

parseModuleName = markStart $ do
  t <- getTokenType
  advanceLexer
  if t /= ttIDENT then
    markError "Expected module name"
  else
    markDone ttMODULE_NAME

consumeUntilEOF = advanceWhile (return true) $ return ()
