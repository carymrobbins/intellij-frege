module com.haskforce.frege.lang.parser.FregeParser where

import com.haskforce.frege.bindings.Intellij
import com.haskforce.frege.lang.parser.Builder
import com.haskforce.frege.lang.parser.Tokens
import com.haskforce.frege.utils.Monad

--- Function to be called by Java code to implement the PsiParser
psiParse :: IElementType -> Mutable s PsiBuilder -> ST s (Mutable s ASTNode)
psiParse !root !psiBuilder = builder.run psiBuilder
  where
  builder = do
    markStart $ top >> markDone root
    getTreeBuilt

top = do
  parseModuleDecl
  consumeUntilEOF

parseModuleDecl = whenTokenIs (== ttMODULE) $ markStart $ do
  x <- getTokenType
  advanceLexer
  parseModuleRef
  expectTokenAdvance ttWHERE
  markDone ttMODULE_DECL

parseModuleRef = do
  markStart $ do
    parseModulePackage
    success <- parseModuleName
    if success then markDone ttMODULE_REF else markError "Expected module"

parseModulePackage = do
  when2TokensAre (== (ttIDENT, ttDOT)) $ do
    markStart $ do
      advanceLexer
      loop
      markDone ttMODULE_PACKAGE
    void $ whenTokenIs (== ttDOT) advanceLexer
  where
  loop = when3TokensAre (== (ttDOT, ttIDENT, ttDOT)) $ do
    advanceLexer
    advanceLexer
    void $ loop

parseModuleName = whenTokenIs (== ttIDENT) $ markStart $ do
  advanceLexer
  markDone ttMODULE_NAME

consumeUntilEOF = advanceWhile (return true) $ return ()
