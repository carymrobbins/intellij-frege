COMMENT ('-- https://github.com/Frege/frege/blob/master/examples/Sudoku.fr')
PACKAGE ('package')
VARID ('examples')
CHAR ('.')
CONID ('Sudoku')
WHERE ('where')
IMPORT ('import')
QUALIFIER ('Data')
CONID ('TreeMap')
VARID ('as')
CONID ('TM')
CHAR ('(')
CONID ('TreeMap')
CHAR (',')
VARID ('keys')
CHAR (')')
IMPORT ('import')
QUALIFIER ('Data')
CONID ('List')
VARID ('as')
CONID ('DL')
VARID ('hiding')
CHAR ('(')
VARID ('find')
CHAR (',')
VARID ('union')
CHAR (')')
TYPE ('type')
CONID ('Element')
CHAR ('=')
CONID ('Int')
COMMENT ('-- 1,2,3,4,5,6,7,8,9')
TYPE ('type')
CONID ('Zelle')
CHAR ('=')
CHAR ('[')
CONID ('Element')
CHAR (']')
COMMENT ('-- set of candidates')
TYPE ('type')
CONID ('Position')
CHAR ('=')
CONID ('Int')
COMMENT ('-- 0..80')
TYPE ('type')
CONID ('Feld')
CHAR ('=')
CHAR ('(')
CONID ('Position')
CHAR (',')
CONID ('Zelle')
CHAR (')')
TYPE ('type')
CONID ('Brett')
CHAR ('=')
CHAR ('[')
CONID ('Feld')
CHAR (']')
DOCUMENTATION ('--- data type for assumptions and conclusions')
DATA ('data')
CONID ('Assumption')
CHAR ('=')
CHAR ('!')
CONID ('ISNOT')
CONID ('Position')
CONID ('Element')
CHAR ('|')
CHAR ('!')
CONID ('IS')
CONID ('Position')
CONID ('Element')
DERIVE ('derive')
CONID ('Eq')
CONID ('Assumption')
DERIVE ('derive')
CONID ('Ord')
CONID ('Assumption')
INSTANCE ('instance')
CONID ('Show')
CONID ('Assumption')
WHERE ('where')
VARID ('show')
CHAR ('(')
CONID ('IS')
VARID ('p')
VARID ('e')
CHAR (')')
CHAR ('=')
VARID ('pname')
VARID ('p')
SOMEOP ('++')
STRCONST ('"="')
SOMEOP ('++')
VARID ('e')
CHAR ('.')
VARID ('show')
VARID ('show')
CHAR ('(')
CONID ('ISNOT')
VARID ('p')
VARID ('e')
CHAR (')')
CHAR ('=')
VARID ('pname')
VARID ('p')
SOMEOP ('++')
STRCONST ('"/"')
SOMEOP ('++')
VARID ('e')
CHAR ('.')
VARID ('show')
VARID ('showcs')
VARID ('cs')
CHAR ('=')
VARID ('joined')
STRCONST ('" "')
CHAR ('(')
VARID ('map')
QUALIFIER ('Assumption')
VARID ('show')
VARID ('cs')
CHAR (')')
VARID ('elements')
DCOLON ('::')
CHAR ('[')
CONID ('Element')
CHAR (']')
COMMENT ('-- all possible elements')
VARID ('elements')
CHAR ('=')
CHAR ('[')
INTCONST ('1')
DOTDOT ('..')
INTCONST ('9')
CHAR (']')
COMMENT ('{-\n    a  b  c   d  e  f   g  h  i\n     0  1  2 | 3  4  5 | 6  7  8    1\n     9 10 11 |12 13 14 |15 16 17    2\n    18 19 20 |21 22 23 |24 25 26    3\n    ---------|---------|--------\n    27 28 29 |30 31 32 |33 34 35    4\n    36 37 38 |39 40 41 |42 43 44    5\n    45 46 47 |48 49 50 |51 52 53    6\n    ---------|---------|--------\n    54 55 56 |57 58 59 |60 61 62    7\n    63 64 65 |66 67 68 |69 70 71    8\n    72 73 74 |75 76 77 |78 79 80    9\n-}')
VARID ('positions')
DCOLON ('::')
CHAR ('[')
CONID ('Position')
CHAR (']')
COMMENT ('-- all possible positions')
VARID ('positions')
CHAR ('=')
CHAR ('[')
INTCONST ('0')
DOTDOT ('..')
INTCONST ('80')
CHAR (']')
VARID ('rowstarts')
DCOLON ('::')
CHAR ('[')
CONID ('Position')
CHAR (']')
COMMENT ('-- all positions where a row is starting')
VARID ('rowstarts')
CHAR ('=')
CHAR ('[')
INTCONST ('0')
CHAR (',')
INTCONST ('9')
CHAR (',')
INTCONST ('18')
CHAR (',')
INTCONST ('27')
CHAR (',')
INTCONST ('36')
CHAR (',')
INTCONST ('45')
CHAR (',')
INTCONST ('54')
CHAR (',')
INTCONST ('63')
CHAR (',')
INTCONST ('72')
CHAR (']')
VARID ('colstarts')
DCOLON ('::')
CHAR ('[')
CONID ('Position')
CHAR (']')
COMMENT ('-- all positions where a column is starting')
VARID ('colstarts')
CHAR ('=')
CHAR ('[')
INTCONST ('0')
CHAR (',')
INTCONST ('1')
CHAR (',')
INTCONST ('2')
CHAR (',')
INTCONST ('3')
CHAR (',')
INTCONST ('4')
CHAR (',')
INTCONST ('5')
CHAR (',')
INTCONST ('6')
CHAR (',')
INTCONST ('7')
CHAR (',')
INTCONST ('8')
CHAR (']')
VARID ('boxstarts')
DCOLON ('::')
CHAR ('[')
CONID ('Position')
CHAR (']')
COMMENT ('-- all positions where a box is starting')
VARID ('boxstarts')
CHAR ('=')
CHAR ('[')
INTCONST ('0')
CHAR (',')
INTCONST ('3')
CHAR (',')
INTCONST ('6')
CHAR (',')
INTCONST ('27')
CHAR (',')
INTCONST ('30')
CHAR (',')
INTCONST ('33')
CHAR (',')
INTCONST ('54')
CHAR (',')
INTCONST ('57')
CHAR (',')
INTCONST ('60')
CHAR (']')
VARID ('boxmuster')
DCOLON ('::')
CHAR ('[')
CONID ('Position')
CHAR (']')
COMMENT ('-- pattern for a box, by adding upper left position results in real box')
VARID ('boxmuster')
CHAR ('=')
CHAR ('[')
INTCONST ('0')
CHAR (',')
INTCONST ('1')
CHAR (',')
INTCONST ('2')
CHAR (',')
INTCONST ('9')
CHAR (',')
INTCONST ('10')
CHAR (',')
INTCONST ('11')
CHAR (',')
INTCONST ('18')
CHAR (',')
INTCONST ('19')
CHAR (',')
INTCONST ('20')
CHAR (']')
DOCUMENTATION ('--- extract field for position')
VARID ('getf')
DCOLON ('::')
CONID ('Brett')
ARROW ('->')
CONID ('Position')
ARROW ('->')
CONID ('Feld')
VARID ('getf')
CHAR ('(')
VARID ('f')
SOMEOP (':')
VARID ('fs')
CHAR (')')
VARID ('p')
CHAR ('|')
VARID ('fst')
VARID ('f')
SOMEOP ('==')
VARID ('p')
CHAR ('=')
VARID ('f')
CHAR ('|')
VARID ('otherwise')
CHAR ('=')
VARID ('getf')
VARID ('fs')
VARID ('p')
VARID ('getf')
CHAR ('[')
CHAR (']')
VARID ('p')
CHAR ('=')
CHAR ('(')
VARID ('p')
CHAR (',')
CHAR ('[')
CHAR (']')
CHAR (')')
DOCUMENTATION ('--- extract cell for position')
VARID ('getc')
DCOLON ('::')
CONID ('Brett')
ARROW ('->')
CONID ('Position')
ARROW ('->')
CONID ('Zelle')
VARID ('getc')
VARID ('b')
VARID ('p')
CHAR ('=')
VARID ('snd')
CHAR ('(')
VARID ('getf')
VARID ('b')
VARID ('p')
CHAR (')')
DOCUMENTATION ('--- compute the list of all positions that belong to the same row as a given position')
VARID ('row')
DCOLON ('::')
CONID ('Position')
ARROW ('->')
CHAR ('[')
CONID ('Position')
CHAR (']')
VARID ('row')
VARID ('p')
CHAR ('=')
CHAR ('[')
VARID ('z')
DOTDOT ('..')
CHAR ('(')
VARID ('z')
SOMEOP ('+')
INTCONST ('8')
CHAR (')')
CHAR (']')
WHERE ('where')
VARID ('z')
CHAR ('=')
CHAR ('(')
VARID ('p')
SOMEOP ('quot')
INTCONST ('9')
CHAR (')')
SOMEOP ('*')
INTCONST ('9')
DOCUMENTATION ('--- compute the list of all positions that belong to the same col as a given position')
VARID ('col')
DCOLON ('::')
CONID ('Position')
ARROW ('->')
CHAR ('[')
CONID ('Position')
CHAR (']')
VARID ('col')
VARID ('p')
CHAR ('=')
VARID ('map')
CHAR ('(')
VARID ('c')
SOMEOP ('+')
CHAR (')')
VARID ('rowstarts')
WHERE ('where')
VARID ('c')
CHAR ('=')
VARID ('p')
SOMEOP ('mod')
INTCONST ('9')
DOCUMENTATION ('--- compute the list of all positions that belong to the same box as a given position')
VARID ('box')
DCOLON ('::')
CONID ('Position')
ARROW ('->')
CHAR ('[')
CONID ('Position')
CHAR (']')
VARID ('box')
VARID ('p')
CHAR ('=')
VARID ('map')
CHAR ('(')
VARID ('z')
SOMEOP ('+')
CHAR (')')
VARID ('boxmuster')
WHERE ('where')
VARID ('ri')
CHAR ('=')
VARID ('p')
SOMEOP ('div')
INTCONST ('27')
SOMEOP ('*')
INTCONST ('27')
COMMENT ('-- 0, 27 or 54, depending on row')
VARID ('ci')
CHAR ('=')
VARID ('p')
SOMEOP ('mod')
INTCONST ('9')
COMMENT ('-- column index 0..8, 0,1,2 is left, 3,4,5 is middle, 6,7,8 is right')
VARID ('cs')
CHAR ('=')
VARID ('ci')
SOMEOP ('div')
INTCONST ('3')
SOMEOP ('*')
INTCONST ('3')
COMMENT ('-- 0, 3 or 6')
VARID ('z')
CHAR ('=')
VARID ('ri')
SOMEOP ('+')
VARID ('cs')
DOCUMENTATION ('--- check if candidate set has exactly one member, i.e. field has been solved')
VARID ('single')
DCOLON ('::')
CONID ('Zelle')
ARROW ('->')
CONID ('Bool')
VARID ('single')
CHAR ('[')
VARID ('_')
CHAR (']')
CHAR ('=')
TRUE ('true')
VARID ('single')
VARID ('_')
CHAR ('=')
FALSE ('false')
VARID ('unsolved')
DCOLON ('::')
CONID ('Zelle')
ARROW ('->')
CONID ('Bool')
VARID ('unsolved')
CHAR ('[')
VARID ('_')
CHAR (']')
CHAR ('=')
FALSE ('false')
VARID ('unsolved')
VARID ('_')
CHAR ('=')
TRUE ('true')
COMMENT ('-- list of rows, cols, boxes')
VARID ('allrows')
CHAR ('=')
VARID ('map')
VARID ('row')
VARID ('rowstarts')
VARID ('allcols')
CHAR ('=')
VARID ('map')
VARID ('col')
VARID ('colstarts')
VARID ('allboxs')
CHAR ('=')
VARID ('map')
VARID ('box')
VARID ('boxstarts')
VARID ('allrcb')
CHAR ('=')
VARID ('zip')
CHAR ('(')
VARID ('repeat')
STRCONST ('"row"')
CHAR (')')
VARID ('allrows')
SOMEOP ('++')
VARID ('zip')
CHAR ('(')
VARID ('repeat')
STRCONST ('"col"')
CHAR (')')
VARID ('allcols')
SOMEOP ('++')
VARID ('zip')
CHAR ('(')
VARID ('repeat')
STRCONST ('"box"')
CHAR (')')
VARID ('allboxs')
VARID ('containers')
DCOLON ('::')
CHAR ('[')
CHAR ('(')
CONID ('Position')
ARROW ('->')
CHAR ('[')
CONID ('Position')
CHAR (']')
CHAR (',')
CONID ('String')
CHAR (')')
CHAR (']')
VARID ('containers')
CHAR ('=')
CHAR ('[')
CHAR ('(')
VARID ('row')
CHAR (',')
STRCONST ('"row"')
CHAR (')')
CHAR (',')
CHAR ('(')
VARID ('col')
CHAR (',')
STRCONST ('"col"')
CHAR (')')
CHAR (',')
CHAR ('(')
VARID ('box')
CHAR (',')
STRCONST ('"box"')
CHAR (')')
CHAR (']')
COMMENT ('-- ----------------- PRINTING ------------------------------------')
COMMENT ('-- printable coordinate of field, upper left is a1, lower right is i9')
VARID ('pname')
VARID ('p')
CHAR ('=')
VARID ('packed')
CHAR ('[')
VARID ('chr')
CHAR ('(')
VARID ('ord')
CHRCONST (''a'')
SOMEOP ('+')
VARID ('p')
SOMEOP ('mod')
INTCONST ('9')
CHAR (')')
CHAR (',')
VARID ('chr')
CHAR ('(')
VARID ('ord')
CHRCONST (''1'')
SOMEOP ('+')
VARID ('p')
SOMEOP ('div')
INTCONST ('9')
CHAR (')')
CHAR (']')
COMMENT ('-- print board')
VARID ('printb')
VARID ('b')
CHAR ('=')
VARID ('mapM_')
VARID ('p1line')
VARID ('allrows')
SOMEOP ('>>')
VARID ('println')
STRCONST ('""')
WHERE ('where')
VARID ('p1line')
VARID ('row')
CHAR ('=')
DO ('do')
VARID ('print')
CHAR ('(')
VARID ('joined')
STRCONST ('""')
CHAR ('(')
VARID ('map')
VARID ('pfld')
VARID ('line')
CHAR (')')
CHAR (')')
WHERE ('where')
VARID ('line')
CHAR ('=')
VARID ('map')
CHAR ('(')
VARID ('getc')
VARID ('b')
CHAR (')')
VARID ('row')
COMMENT ('-- print field (brief)')
COMMENT ('--   ? = no candidate')
COMMENT ('--   5 = field is 5')
COMMENT ('--   . = some candidates')
VARID ('pfld')
CHAR ('[')
CHAR (']')
CHAR ('=')
STRCONST ('"?"')
VARID ('pfld')
CHAR ('[')
VARID ('x')
CHAR (']')
CHAR ('=')
VARID ('show')
VARID ('x')
VARID ('pfld')
VARID ('zs')
CHAR ('=')
STRCONST ('"0"')
COMMENT ('-- print initial/final board')
VARID ('result')
VARID ('msg')
VARID ('b')
CHAR ('=')
DO ('do')
VARID ('println')
CHAR ('(')
STRCONST ('"Result: "')
SOMEOP ('++')
VARID ('msg')
CHAR (')')
VARID ('print')
CHAR ('(')
STRCONST ('"Board: "')
CHAR (')')
VARID ('printb')
VARID ('b')
VARID ('return')
VARID ('b')
VARID ('res012')
VARID ('b')
CHAR ('=')
CASE ('case')
VARID ('concatMap')
CHAR ('(')
VARID ('getc')
VARID ('b')
CHAR (')')
CHAR ('[')
INTCONST ('0')
CHAR (',')
INTCONST ('1')
CHAR (',')
INTCONST ('2')
CHAR (']')
OF ('of')
CHAR ('[')
VARID ('a')
CHAR (',')
VARID ('b')
CHAR (',')
VARID ('c')
CHAR (']')
ARROW ('->')
VARID ('a')
SOMEOP ('*')
INTCONST ('100')
SOMEOP ('+')
VARID ('b')
SOMEOP ('*')
INTCONST ('10')
SOMEOP ('+')
VARID ('c')
VARID ('_')
ARROW ('->')
INTCONST ('9999999')
COMMENT ('-- -------------------------- BOARD ALTERATION ACTIONS ---------------------------------')
COMMENT ('-- print a message about what is done to the board and return the new board')
VARID ('turnoff1')
DCOLON ('::')
CONID ('Position')
ARROW ('->')
CONID ('Zelle')
ARROW ('->')
CONID ('Brett')
ARROW ('->')
CONID ('IO')
CONID ('Brett')
VARID ('turnoff1')
VARID ('i')
VARID ('off')
VARID ('b')
CHAR ('|')
VARID ('single')
VARID ('nc')
CHAR ('=')
DO ('do')
COMMENT ('-- print (pname i)')
COMMENT ('-- print ": set to "')
COMMENT ('-- print (head nc)')
COMMENT ('-- println " (naked single)"')
VARID ('return')
VARID ('newb')
CHAR ('|')
VARID ('otherwise')
CHAR ('=')
VARID ('return')
VARID ('newb')
WHERE ('where')
VARID ('cell')
CHAR ('=')
VARID ('getc')
VARID ('b')
VARID ('i')
VARID ('nc')
CHAR ('=')
VARID ('filter')
CHAR ('(')
SOMEOP ('notElem')
VARID ('off')
CHAR (')')
VARID ('cell')
VARID ('newb')
CHAR ('=')
CHAR ('(')
VARID ('i')
CHAR (',')
VARID ('nc')
CHAR (')')
SOMEOP (':')
CHAR ('[')
VARID ('f')
CHAR ('|')
VARID ('f')
GETS ('<-')
VARID ('b')
CHAR (',')
VARID ('fst')
VARID ('f')
SOMEOP ('!=')
VARID ('i')
CHAR (']')
VARID ('turnoff')
DCOLON ('::')
CONID ('Int')
ARROW ('->')
CONID ('Zelle')
ARROW ('->')
CONID ('String')
ARROW ('->')
CONID ('Brett')
ARROW ('->')
CONID ('IO')
CONID ('Brett')
VARID ('turnoff')
VARID ('i')
VARID ('off')
VARID ('msg')
VARID ('b')
CHAR ('=')
DO ('do')
COMMENT ('-- print (pname i)')
COMMENT ('-- print ": set to "')
COMMENT ('-- print nc')
COMMENT ('-- print " by clearing "')
COMMENT ('-- print off')
COMMENT ('-- print " "')
COMMENT ('-- println  msg')
VARID ('return')
VARID ('newb')
WHERE ('where')
VARID ('cell')
CHAR ('=')
VARID ('getc')
VARID ('b')
VARID ('i')
VARID ('nc')
CHAR ('=')
VARID ('filter')
CHAR ('(')
SOMEOP ('notElem')
VARID ('off')
CHAR (')')
VARID ('cell')
VARID ('newb')
CHAR ('=')
CHAR ('(')
VARID ('i')
CHAR (',')
VARID ('nc')
CHAR (')')
SOMEOP (':')
CHAR ('[')
VARID ('f')
CHAR ('|')
VARID ('f')
GETS ('<-')
VARID ('b')
CHAR (',')
VARID ('fst')
VARID ('f')
SOMEOP ('!=')
VARID ('i')
CHAR (']')
VARID ('turnoffh')
VARID ('ps')
VARID ('off')
VARID ('msg')
VARID ('b')
CHAR ('=')
VARID ('foldM')
VARID ('toh')
VARID ('b')
VARID ('ps')
WHERE ('where')
VARID ('toh')
VARID ('b')
VARID ('p')
CHAR ('=')
VARID ('turnoff')
VARID ('p')
VARID ('off')
VARID ('msg')
VARID ('b')
VARID ('setto')
DCOLON ('::')
CONID ('Position')
ARROW ('->')
CONID ('Element')
ARROW ('->')
CONID ('String')
ARROW ('->')
CONID ('Brett')
ARROW ('->')
CONID ('IO')
CONID ('Brett')
VARID ('setto')
VARID ('i')
VARID ('n')
VARID ('cname')
VARID ('b')
CHAR ('=')
DO ('do')
COMMENT ('-- print (pname i)')
COMMENT ('-- print ": set to "')
COMMENT ('-- print n')
COMMENT ('-- print " (hidden single in "')
COMMENT ('-- print cname')
COMMENT ('-- println ")"')
VARID ('return')
VARID ('newb')
WHERE ('where')
VARID ('nf')
CHAR ('=')
CHAR ('[')
VARID ('n')
CHAR (']')
VARID ('newb')
CHAR ('=')
CHAR ('(')
VARID ('i')
CHAR (',')
VARID ('nf')
CHAR (')')
SOMEOP (':')
CHAR ('[')
VARID ('f')
CHAR ('|')
VARID ('f')
GETS ('<-')
VARID ('b')
CHAR (',')
VARID ('fst')
VARID ('f')
SOMEOP ('!=')
VARID ('i')
CHAR (']')
COMMENT ('-- ----------------------------- SOLVING STRATEGIES ---------------------------------------------')
COMMENT ('-- reduce candidate sets that contains numbers already in same row, col or box')
COMMENT ('-- This finds (and logs) NAKED SINGLEs in passing.')
VARID ('reduce')
VARID ('b')
CHAR ('=')
CHAR ('[')
VARID ('turnoff1')
VARID ('p')
VARID ('sss')
CHAR ('|')
CHAR ('(')
VARID ('p')
CHAR (',')
VARID ('cell')
CHAR (')')
GETS ('<-')
VARID ('b')
CHAR (',')
COMMENT ('-- for each field')
VARID ('unsolved')
VARID ('cell')
CHAR (',')
COMMENT ('--  with more than 1 candidate')
COMMENT ('--       single fields in containers that are candidates of that field')
VARID ('sss')
CHAR ('=')
CHAR ('[')
VARID ('s')
CHAR ('|')
CHAR ('(')
VARID ('rcb')
CHAR (',')
VARID ('_')
CHAR (')')
GETS ('<-')
VARID ('containers')
CHAR (',')
CHAR ('[')
VARID ('s')
CHAR (']')
GETS ('<-')
VARID ('map')
CHAR ('(')
VARID ('getc')
VARID ('b')
CHAR (')')
CHAR ('(')
VARID ('rcb')
VARID ('p')
CHAR (')')
CHAR (',')
VARID ('s')
SOMEOP ('elem')
VARID ('cell')
CHAR (']')
CHAR (',')
VARID ('sss')
SOMEOP ('!=')
CHAR ('[')
CHAR (']')
CHAR (']')
COMMENT ('-- collect field index, elements to remove from candidate set')
COMMENT ('-- look for a number that appears in exactly 1 candidate set of a container')
COMMENT ('-- this number can go in no other place (HIDDEN SINGLE)')
VARID ('hiddenSingle')
VARID ('b')
CHAR ('=')
CHAR ('[')
VARID ('setto')
VARID ('i')
VARID ('n')
VARID ('cname')
CHAR ('|')
COMMENT ('-- select index, number, containername')
CHAR ('(')
VARID ('cname')
CHAR (',')
VARID ('rcb')
CHAR (')')
GETS ('<-')
VARID ('allrcb')
CHAR (',')
COMMENT ('-- FOR rcb IN allrcb')
VARID ('n')
GETS ('<-')
VARID ('elements')
CHAR (',')
COMMENT ('--  FOR n IN elements')
VARID ('fs')
CHAR ('=')
VARID ('filter')
CHAR ('(')
VARID ('unsolved')
SOMEOP ('•')
VARID ('snd')
CHAR (')')
CHAR ('(')
VARID ('map')
CHAR ('(')
VARID ('getf')
VARID ('b')
CHAR (')')
VARID ('rcb')
CHAR (')')
CHAR (',')
VARID ('occurs')
CHAR ('=')
VARID ('filter')
CHAR ('(')
CHAR ('(')
VARID ('n')
SOMEOP ('elem')
CHAR (')')
SOMEOP ('•')
VARID ('snd')
CHAR (')')
VARID ('fs')
CHAR (',')
VARID ('length')
VARID ('occurs')
SOMEOP ('==')
INTCONST ('1')
CHAR (',')
CHAR ('(')
VARID ('i')
CHAR (',')
VARID ('_')
CHAR (')')
GETS ('<-')
VARID ('occurs')
CHAR (']')
COMMENT ('-- look for NAKED PAIRS, TRIPLES, QUADS')
VARID ('nakedPair')
VARID ('n')
VARID ('b')
CHAR ('=')
CHAR ('[')
VARID ('turnoff')
VARID ('p')
VARID ('t')
CHAR ('(')
STRCONST ('"(naked tuple in "')
SOMEOP ('++')
VARID ('nm')
SOMEOP ('++')
STRCONST ('")"')
CHAR (')')
CHAR ('|')
COMMENT ('-- SELECT pos, tuple, name')
COMMENT ('-- n <- [2,3,4],                    //  FOR n IN [2,3,4]')
CHAR ('(')
VARID ('nm')
CHAR (',')
VARID ('rcb')
CHAR (')')
GETS ('<-')
VARID ('allrcb')
CHAR (',')
COMMENT ('--    FOR rcb IN containers')
VARID ('fs')
CHAR ('=')
VARID ('map')
CHAR ('(')
VARID ('getf')
VARID ('b')
CHAR (')')
VARID ('rcb')
CHAR (',')
COMMENT ('--      let fs = fields for rcb positions')
VARID ('u')
CHAR ('=')
CHAR ('(')
VARID ('fold')
VARID ('union')
CHAR ('[')
CHAR (']')
CHAR ('.')
VARID ('filter')
VARID ('unsolved')
CHAR ('.')
VARID ('map')
VARID ('snd')
CHAR (')')
VARID ('fs')
CHAR (',')
COMMENT ('-- let u = union of non single candidates')
VARID ('t')
GETS ('<-')
VARID ('n')
SOMEOP ('outof')
VARID ('u')
CHAR (',')
COMMENT ('--      FOR t IN n-tuples')
VARID ('hit')
CHAR ('=')
CHAR ('(')
VARID ('filter')
CHAR ('(')
CHAR ('(')
SOMEOP ('subset')
VARID ('t')
CHAR (')')
CHAR ('.')
VARID ('snd')
CHAR (')')
CHAR ('.')
VARID ('filter')
CHAR ('(')
VARID ('unsolved')
CHAR ('.')
VARID ('snd')
CHAR (')')
CHAR (')')
VARID ('fs')
CHAR (',')
VARID ('length')
VARID ('hit')
SOMEOP ('==')
VARID ('n')
CHAR (',')
CHAR ('(')
VARID ('p')
CHAR (',')
VARID ('cell')
CHAR (')')
GETS ('<-')
VARID ('fs')
CHAR (',')
VARID ('p')
SOMEOP ('notElem')
VARID ('map')
VARID ('fst')
VARID ('hit')
CHAR (',')
VARID ('any')
CHAR ('(')
SOMEOP ('elem')
VARID ('cell')
CHAR (')')
VARID ('t')
CHAR (']')
COMMENT ('-- look for HIDDEN PAIRS, TRIPLES or QUADS')
VARID ('hiddenPair')
VARID ('n')
VARID ('b')
CHAR ('=')
CHAR ('[')
VARID ('turnoff')
VARID ('p')
VARID ('off')
CHAR ('(')
STRCONST ('"(hidden "')
SOMEOP ('++')
VARID ('show')
VARID ('t')
SOMEOP ('++')
STRCONST ('" in "')
SOMEOP ('++')
VARID ('nm')
SOMEOP ('++')
STRCONST ('")"')
CHAR (')')
CHAR ('|')
COMMENT ('-- SELECT pos, tuple, name')
COMMENT ('-- n <- [2,3,4],                    //  FOR n IN [2,3,4]')
CHAR ('(')
VARID ('nm')
CHAR (',')
VARID ('rcb')
CHAR (')')
GETS ('<-')
VARID ('allrcb')
CHAR (',')
COMMENT ('--    FOR rcb IN containers')
VARID ('fs')
CHAR ('=')
VARID ('map')
CHAR ('(')
VARID ('getf')
VARID ('b')
CHAR (')')
VARID ('rcb')
CHAR (',')
COMMENT ('--      let fs = fields for rcb positions')
VARID ('u')
CHAR ('=')
CHAR ('(')
VARID ('fold')
VARID ('union')
CHAR ('[')
CHAR (']')
CHAR ('.')
VARID ('filter')
CHAR ('(')
CHAR ('(')
SOMEOP ('>')
INTCONST ('1')
CHAR (')')
CHAR ('.')
VARID ('length')
CHAR (')')
CHAR ('.')
VARID ('map')
VARID ('snd')
CHAR (')')
VARID ('fs')
CHAR (',')
COMMENT ('-- let u = union of non single candidates')
VARID ('t')
GETS ('<-')
VARID ('n')
SOMEOP ('outof')
VARID ('u')
CHAR (',')
COMMENT ('--      FOR t IN n-tuples')
VARID ('hit')
CHAR ('=')
CHAR ('(')
VARID ('filter')
CHAR ('(')
VARID ('any')
CHAR ('(')
SOMEOP ('elem')
VARID ('t')
CHAR (')')
CHAR ('.')
VARID ('snd')
CHAR (')')
CHAR ('.')
VARID ('filter')
CHAR ('(')
VARID ('unsolved')
CHAR ('.')
VARID ('snd')
CHAR (')')
CHAR (')')
VARID ('fs')
CHAR (',')
VARID ('length')
VARID ('hit')
SOMEOP ('==')
VARID ('n')
CHAR (',')
VARID ('off')
CHAR ('=')
CHAR ('(')
VARID ('fold')
VARID ('union')
CHAR ('[')
CHAR (']')
CHAR ('.')
VARID ('map')
VARID ('snd')
CHAR (')')
VARID ('hit')
SOMEOP ('minus')
VARID ('t')
CHAR (',')
VARID ('off')
SOMEOP ('!=')
CHAR ('[')
CHAR (']')
CHAR (',')
CHAR ('(')
VARID ('p')
CHAR (',')
VARID ('cell')
CHAR (')')
GETS ('<-')
VARID ('hit')
CHAR (',')
CHAR ('!')
CHAR ('(')
VARID ('cell')
SOMEOP ('subset')
VARID ('t')
CHAR (')')
CHAR (']')
VARID ('a')
SOMEOP ('subset')
VARID ('b')
CHAR ('=')
VARID ('all')
CHAR ('(')
SOMEOP ('elem')
VARID ('b')
CHAR (')')
VARID ('a')
VARID ('a')
SOMEOP ('union')
VARID ('b')
CHAR ('=')
VARID ('uniq')
CHAR ('(')
VARID ('sort')
CHAR ('(')
VARID ('a')
SOMEOP ('++')
VARID ('b')
CHAR (')')
CHAR (')')
VARID ('a')
SOMEOP ('minus')
VARID ('b')
CHAR ('=')
VARID ('filter')
CHAR ('(')
SOMEOP ('notElem')
VARID ('b')
CHAR (')')
VARID ('a')
VARID ('a')
SOMEOP ('common')
VARID ('b')
CHAR ('=')
VARID ('filter')
CHAR ('(')
SOMEOP ('elem')
VARID ('b')
CHAR (')')
VARID ('a')
VARID ('n')
SOMEOP ('outof')
VARID ('as')
CHAR ('|')
VARID ('length')
VARID ('as')
SOMEOP ('<')
VARID ('n')
CHAR ('=')
CHAR ('[')
CHAR (']')
CHAR ('|')
CHAR ('[')
CHAR (']')
GETS ('<-')
VARID ('as')
CHAR ('=')
CHAR ('[')
CHAR (']')
CHAR ('|')
INTCONST ('1')
SOMEOP ('>=')
VARID ('n')
CHAR ('=')
VARID ('map')
CHAR ('(')
SOMEOP (':')
CHAR ('[')
CHAR (']')
CHAR (')')
VARID ('as')
CHAR ('|')
CHAR ('(')
VARID ('a')
SOMEOP (':')
VARID ('bs')
CHAR (')')
GETS ('<-')
VARID ('as')
CHAR ('=')
VARID ('map')
CHAR ('(')
VARID ('a')
SOMEOP (':')
CHAR (')')
CHAR ('(')
CHAR ('(')
VARID ('n')
CHAR ('-')
INTCONST ('1')
CHAR (')')
SOMEOP ('outof')
VARID ('bs')
CHAR (')')
SOMEOP ('++')
CHAR ('(')
VARID ('n')
SOMEOP ('outof')
VARID ('bs')
CHAR (')')
CHAR ('|')
VARID ('otherwise')
CHAR ('=')
VARID ('undefined')
COMMENT ('-- cannot happen because either as is empty or not')
VARID ('same')
VARID ('f')
VARID ('a')
VARID ('b')
CHAR ('=')
VARID ('b')
SOMEOP ('elem')
VARID ('f')
VARID ('a')
VARID ('intersectionlist')
CHAR ('=')
CHAR ('[')
CHAR ('(')
VARID ('allboxs')
CHAR (',')
VARID ('row')
CHAR (',')
STRCONST ('"box/row intersection"')
CHAR (')')
CHAR (',')
CHAR ('(')
VARID ('allboxs')
CHAR (',')
VARID ('col')
CHAR (',')
STRCONST ('"box/col intersection"')
CHAR (')')
CHAR (',')
CHAR ('(')
VARID ('allrows')
SOMEOP ('++')
VARID ('allcols')
CHAR (',')
VARID ('box')
CHAR (',')
STRCONST ('"line/box intersection"')
CHAR (')')
CHAR (']')
VARID ('intersections')
VARID ('b')
CHAR ('=')
CHAR ('[')
VARID ('turnoff')
VARID ('pos')
CHAR ('[')
VARID ('c')
CHAR (']')
VARID ('reason')
CHAR ('|')
COMMENT ('-- SELECT position, candidate, reson')
CHAR ('(')
VARID ('from')
CHAR (',')
VARID ('container')
CHAR (',')
VARID ('reason')
CHAR (')')
GETS ('<-')
VARID ('intersectionlist')
CHAR (',')
VARID ('rcb')
GETS ('<-')
VARID ('from')
CHAR (',')
VARID ('fs')
CHAR ('=')
CHAR ('(')
VARID ('filter')
CHAR ('(')
VARID ('unsolved')
CHAR ('.')
VARID ('snd')
CHAR (')')
CHAR ('.')
VARID ('map')
CHAR ('(')
VARID ('getf')
VARID ('b')
CHAR (')')
CHAR (')')
VARID ('rcb')
CHAR (',')
COMMENT ('-- fs = fields in from with more than 1 candidate')
VARID ('c')
GETS ('<-')
CHAR ('(')
VARID ('fold')
VARID ('union')
CHAR ('[')
CHAR (']')
SOMEOP ('•')
VARID ('map')
VARID ('snd')
CHAR (')')
VARID ('fs')
CHAR (',')
COMMENT ('-- FOR c IN union of candidates')
VARID ('cpos')
CHAR ('=')
CHAR ('(')
VARID ('map')
VARID ('fst')
SOMEOP ('•')
VARID ('filter')
CHAR ('(')
CHAR ('(')
VARID ('c')
SOMEOP ('elem')
CHAR (')')
SOMEOP ('•')
VARID ('snd')
CHAR (')')
CHAR (')')
VARID ('fs')
CHAR (',')
COMMENT ('-- cpos = positions where c occurs')
VARID ('cpos')
SOMEOP ('!=')
CHAR ('[')
CHAR (']')
CHAR (',')
COMMENT ('-- WHERE cpos is not empty')
VARID ('all')
CHAR ('(')
VARID ('same')
VARID ('container')
CHAR ('(')
VARID ('head')
VARID ('cpos')
CHAR (')')
CHAR (')')
CHAR ('(')
VARID ('tail')
VARID ('cpos')
CHAR (')')
CHAR (',')
COMMENT ('-- WHERE all positions are in the intersection')
COMMENT ('-- we can remove all occurences of c that are in container, but not in from')
CHAR ('(')
VARID ('pos')
CHAR (',')
VARID ('cell')
CHAR (')')
GETS ('<-')
VARID ('map')
CHAR ('(')
VARID ('getf')
VARID ('b')
CHAR (')')
CHAR ('(')
VARID ('container')
CHAR ('(')
VARID ('head')
VARID ('cpos')
CHAR (')')
CHAR (')')
CHAR (',')
VARID ('c')
SOMEOP ('elem')
VARID ('cell')
CHAR (',')
VARID ('pos')
SOMEOP ('notElem')
VARID ('rcb')
CHAR (']')
COMMENT ('-- look for an XY Wing')
COMMENT ('--  - there exists a cell A with candidates X and Y')
COMMENT ('--  - there exists a cell B with candidates X and Z that shares a container with A')
COMMENT ('--  - there exists a cell C with candidates Y and Z that shares a container with A')
COMMENT ('-- reasoning')
COMMENT ('--  - if A is X, B will be Z')
COMMENT ('--  - if A is Y, C will be Z')
COMMENT ('--  - since A will indeed be X or Y -> B or C will be Z')
COMMENT ('--  - thus, no cell that can see B and C can be Z')
VARID ('xyWing')
VARID ('board')
CHAR ('=')
CHAR ('[')
VARID ('turnoff')
VARID ('p')
CHAR ('[')
VARID ('z')
CHAR (']')
CHAR ('(')
STRCONST ('"xy wing "')
SOMEOP ('++')
VARID ('pname')
VARID ('b')
SOMEOP ('++')
STRCONST ('" "')
SOMEOP ('++')
VARID ('pname')
VARID ('c')
SOMEOP ('++')
STRCONST ('" because of "')
SOMEOP ('++')
VARID ('pname')
VARID ('a')
CHAR (')')
CHAR ('|')
CHAR ('(')
VARID ('a')
CHAR (',')
CHAR ('[')
VARID ('x')
CHAR (',')
VARID ('y')
CHAR (']')
CHAR (')')
GETS ('<-')
VARID ('board')
CHAR (',')
COMMENT ('-- there exists a cell a with candidates x and y')
VARID ('rcba')
CHAR ('=')
VARID ('map')
CHAR ('(')
VARID ('getf')
VARID ('board')
CHAR (')')
CHAR ('(')
VARID ('row')
VARID ('a')
SOMEOP ('++')
VARID ('col')
VARID ('a')
SOMEOP ('++')
VARID ('box')
VARID ('a')
CHAR (')')
CHAR (',')
COMMENT ('-- rcba = all fields that share a container with a')
CHAR ('(')
VARID ('b')
CHAR (',')
CHAR ('[')
VARID ('b1')
CHAR (',')
VARID ('b2')
CHAR (']')
CHAR (')')
GETS ('<-')
VARID ('rcba')
CHAR (',')
VARID ('b')
SOMEOP ('!=')
VARID ('a')
CHAR (',')
VARID ('b1')
SOMEOP ('==')
VARID ('x')
SOMEOP ('&&')
VARID ('b2')
SOMEOP ('!=')
VARID ('y')
SOMEOP ('||')
VARID ('b2')
SOMEOP ('==')
VARID ('x')
SOMEOP ('&&')
VARID ('b1')
SOMEOP ('!=')
VARID ('y')
CHAR (',')
COMMENT ('-- there exists a cell B with candidates x and z')
VARID ('z')
CHAR ('=')
IF ('if')
VARID ('b1')
SOMEOP ('==')
VARID ('x')
THEN ('then')
VARID ('b2')
ELSE ('else')
VARID ('b1')
CHAR (',')
CHAR ('(')
VARID ('c')
CHAR (',')
CHAR ('[')
VARID ('c1')
CHAR (',')
VARID ('c2')
CHAR (']')
CHAR (')')
GETS ('<-')
VARID ('rcba')
CHAR (',')
VARID ('c')
SOMEOP ('!=')
VARID ('a')
CHAR (',')
VARID ('c')
SOMEOP ('!=')
VARID ('b')
CHAR (',')
VARID ('c1')
SOMEOP ('==')
VARID ('y')
SOMEOP ('&&')
VARID ('c2')
SOMEOP ('==')
VARID ('z')
SOMEOP ('||')
VARID ('c1')
SOMEOP ('==')
VARID ('z')
SOMEOP ('&&')
VARID ('c2')
SOMEOP ('==')
VARID ('y')
CHAR (',')
COMMENT ('-- there exists a cell C with candidates y and z')
VARID ('ps')
CHAR ('=')
CHAR ('(')
VARID ('uniq')
CHAR ('.')
VARID ('sort')
CHAR (')')
CHAR ('(')
CHAR ('(')
VARID ('row')
VARID ('b')
SOMEOP ('++')
VARID ('col')
VARID ('b')
SOMEOP ('++')
VARID ('box')
VARID ('b')
CHAR (')')
SOMEOP ('common')
CHAR ('(')
VARID ('row')
VARID ('c')
SOMEOP ('++')
VARID ('col')
VARID ('c')
SOMEOP ('++')
VARID ('box')
VARID ('c')
CHAR (')')
CHAR (')')
CHAR (',')
COMMENT ('-- remove z in ps')
CHAR ('(')
VARID ('p')
CHAR (',')
VARID ('cs')
CHAR (')')
GETS ('<-')
VARID ('map')
CHAR ('(')
VARID ('getf')
VARID ('board')
CHAR (')')
VARID ('ps')
CHAR (',')
VARID ('p')
SOMEOP ('!=')
VARID ('b')
CHAR (',')
VARID ('p')
SOMEOP ('!=')
VARID ('c')
CHAR (',')
VARID ('z')
SOMEOP ('elem')
VARID ('cs')
CHAR (']')
COMMENT ('-- look for a N-Fish (2: X-Wing, 3: Swordfish, 4: Jellyfish)')
COMMENT ('-- When all candidates for a particular digit in N rows are located')
COMMENT ('-- in only N columns, we can eliminate all candidates from those N columns')
COMMENT ('--  which are not located on those N rows')
VARID ('fish')
VARID ('n')
VARID ('board')
CHAR ('=')
VARID ('fish')
STRCONST ('"row"')
VARID ('allrows')
VARID ('row')
VARID ('col')
SOMEOP ('++')
VARID ('fish')
STRCONST ('"col"')
VARID ('allcols')
VARID ('col')
VARID ('row')
WHERE ('where')
VARID ('fishname')
INTCONST ('2')
CHAR ('=')
STRCONST ('"X-Wing"')
VARID ('fishname')
INTCONST ('3')
CHAR ('=')
STRCONST ('"Swordfish"')
VARID ('fishname')
INTCONST ('4')
CHAR ('=')
STRCONST ('"Jellyfish"')
VARID ('fishname')
VARID ('_')
CHAR ('=')
STRCONST ('"unknown fish"')
VARID ('fish')
VARID ('nm')
VARID ('allrows')
VARID ('row')
VARID ('col')
CHAR ('=')
CHAR ('[')
VARID ('turnoff')
VARID ('p')
CHAR ('[')
VARID ('x')
CHAR (']')
CHAR ('(')
VARID ('fishname')
VARID ('n')
SOMEOP ('++')
STRCONST ('" in "')
SOMEOP ('++')
VARID ('nm')
SOMEOP ('++')
STRCONST ('" "')
SOMEOP ('++')
VARID ('show')
CHAR ('(')
VARID ('map')
CHAR ('(')
VARID ('pname')
CHAR ('.')
VARID ('head')
CHAR (')')
VARID ('rset')
CHAR (')')
CHAR (')')
CHAR ('|')
VARID ('rset')
GETS ('<-')
VARID ('n')
SOMEOP ('outof')
VARID ('allrows')
CHAR (',')
COMMENT ('-- take n rows (or cols)')
VARID ('x')
GETS ('<-')
VARID ('elements')
CHAR (',')
COMMENT ('-- look for certain number')
VARID ('rflds')
CHAR ('=')
VARID ('map')
CHAR ('(')
VARID ('filter')
CHAR ('(')
CHAR ('(')
SOMEOP ('>')
INTCONST ('1')
CHAR (')')
CHAR ('.')
VARID ('length')
CHAR ('.')
VARID ('snd')
CHAR (')')
CHAR ('.')
VARID ('map')
CHAR ('(')
VARID ('getf')
VARID ('board')
CHAR (')')
CHAR (')')
VARID ('rset')
CHAR (',')
COMMENT ('-- unsolved fields in the rowset')
VARID ('colss')
CHAR ('=')
CHAR ('(')
VARID ('map')
CHAR ('(')
VARID ('map')
CHAR ('(')
VARID ('head')
CHAR ('.')
VARID ('col')
CHAR ('.')
VARID ('fst')
CHAR (')')
CHAR ('.')
VARID ('filter')
CHAR ('(')
CHAR ('(')
VARID ('x')
SOMEOP ('elem')
CHAR (')')
CHAR ('.')
VARID ('snd')
CHAR (')')
CHAR (')')
VARID ('rflds')
CHAR (')')
CHAR (',')
COMMENT ('-- where x occurs in candidates')
VARID ('all')
CHAR ('(')
CHAR ('(')
SOMEOP ('>')
INTCONST ('1')
CHAR (')')
CHAR ('.')
VARID ('length')
CHAR (')')
VARID ('colss')
CHAR (',')
COMMENT ('-- x must appear in at least 2 cols')
VARID ('cols')
CHAR ('=')
VARID ('fold')
VARID ('union')
CHAR ('[')
CHAR (']')
VARID ('colss')
CHAR (',')
VARID ('length')
VARID ('cols')
SOMEOP ('==')
VARID ('n')
CHAR (',')
VARID ('cstart')
GETS ('<-')
VARID ('cols')
CHAR (',')
CHAR ('(')
VARID ('p')
CHAR (',')
VARID ('cell')
CHAR (')')
GETS ('<-')
VARID ('map')
CHAR ('(')
VARID ('getf')
VARID ('board')
CHAR (')')
CHAR ('(')
VARID ('col')
VARID ('cstart')
CHAR (')')
CHAR (',')
VARID ('x')
SOMEOP ('elem')
VARID ('cell')
CHAR (',')
VARID ('all')
CHAR ('(')
VARID ('p')
SOMEOP ('notElem')
CHAR (')')
VARID ('rset')
CHAR (']')
COMMENT ('-- compute immediate consequences of an assumption of the form (p `IS` e) or (p `ISNOT` e)')
VARID ('conseq')
VARID ('board')
CHAR ('(')
CONID ('IS')
VARID ('p')
VARID ('e')
CHAR (')')
CHAR ('=')
VARID ('uniq')
CHAR ('(')
VARID ('sort')
CHAR ('(')
CHAR ('[')
VARID ('p')
SOMEOP ('ISNOT')
VARID ('x')
CHAR ('|')
VARID ('x')
GETS ('<-')
VARID ('getc')
VARID ('board')
VARID ('p')
CHAR (',')
VARID ('x')
SOMEOP ('!=')
VARID ('e')
CHAR (']')
SOMEOP ('++')
CHAR ('[')
VARID ('a')
SOMEOP ('ISNOT')
VARID ('e')
CHAR ('|')
CHAR ('(')
VARID ('a')
CHAR (',')
VARID ('cs')
CHAR (')')
GETS ('<-')
VARID ('map')
CHAR ('(')
VARID ('getf')
VARID ('board')
CHAR (')')
CHAR ('(')
VARID ('row')
VARID ('p')
SOMEOP ('++')
VARID ('col')
VARID ('p')
SOMEOP ('++')
VARID ('box')
VARID ('p')
CHAR (')')
CHAR (',')
VARID ('a')
SOMEOP ('!=')
VARID ('p')
CHAR (',')
VARID ('e')
SOMEOP ('elem')
VARID ('cs')
CHAR (']')
CHAR (')')
CHAR (')')
VARID ('conseq')
VARID ('board')
CHAR ('(')
CONID ('ISNOT')
VARID ('p')
VARID ('e')
CHAR (')')
CHAR ('=')
VARID ('uniq')
CHAR ('(')
VARID ('sort')
CHAR ('(')
CHAR ('[')
VARID ('p')
SOMEOP ('IS')
VARID ('x')
CHAR ('|')
VARID ('cs')
CHAR ('=')
VARID ('getc')
VARID ('board')
VARID ('p')
CHAR (',')
VARID ('length')
VARID ('cs')
SOMEOP ('==')
INTCONST ('2')
CHAR (',')
VARID ('x')
GETS ('<-')
VARID ('cs')
CHAR (',')
VARID ('x')
SOMEOP ('!=')
VARID ('e')
CHAR (']')
SOMEOP ('++')
CHAR ('[')
VARID ('a')
SOMEOP ('IS')
VARID ('e')
CHAR ('|')
VARID ('cp')
GETS ('<-')
CHAR ('[')
VARID ('row')
VARID ('p')
CHAR (',')
VARID ('box')
VARID ('p')
CHAR (',')
VARID ('col')
VARID ('p')
CHAR (']')
CHAR (',')
VARID ('as')
CHAR ('=')
CHAR ('(')
VARID ('filter')
CHAR ('(')
CHAR ('(')
VARID ('e')
SOMEOP ('elem')
CHAR (')')
CHAR ('.')
VARID ('getc')
VARID ('board')
CHAR (')')
CHAR ('.')
VARID ('filter')
CHAR ('(')
VARID ('p')
SOMEOP ('!=')
CHAR (')')
CHAR (')')
VARID ('cp')
CHAR (',')
VARID ('length')
VARID ('as')
SOMEOP ('==')
INTCONST ('1')
CHAR (',')
VARID ('a')
CHAR ('=')
VARID ('head')
VARID ('as')
CHAR (']')
CHAR (')')
CHAR (')')
COMMENT ('-- check if two assumptions contradict each other')
VARID ('contradicts')
CHAR ('(')
CONID ('IS')
VARID ('a')
VARID ('x')
CHAR (')')
CHAR ('(')
CONID ('IS')
VARID ('b')
VARID ('y')
CHAR (')')
CHAR ('=')
VARID ('a')
SOMEOP ('==')
VARID ('b')
SOMEOP ('&&')
VARID ('x')
SOMEOP ('!=')
VARID ('y')
VARID ('contradicts')
CHAR ('(')
CONID ('IS')
VARID ('a')
VARID ('x')
CHAR (')')
CHAR ('(')
CONID ('ISNOT')
VARID ('b')
VARID ('y')
CHAR (')')
CHAR ('=')
VARID ('a')
SOMEOP ('==')
VARID ('b')
SOMEOP ('&&')
VARID ('x')
SOMEOP ('==')
VARID ('y')
VARID ('contradicts')
CHAR ('(')
CONID ('ISNOT')
VARID ('a')
VARID ('x')
CHAR (')')
CHAR ('(')
CONID ('IS')
VARID ('b')
VARID ('y')
CHAR (')')
CHAR ('=')
VARID ('a')
SOMEOP ('==')
VARID ('b')
SOMEOP ('&&')
VARID ('x')
SOMEOP ('==')
VARID ('y')
VARID ('contradicts')
CHAR ('(')
CONID ('ISNOT')
VARID ('_')
VARID ('_')
CHAR (')')
CHAR ('(')
CONID ('ISNOT')
VARID ('_')
VARID ('_')
CHAR (')')
CHAR ('=')
FALSE ('false')
COMMENT ('-- get the Position of an Assumption')
VARID ('aPos')
CHAR ('(')
CONID ('IS')
VARID ('p')
VARID ('_')
CHAR (')')
CHAR ('=')
VARID ('p')
VARID ('aPos')
CHAR ('(')
CONID ('ISNOT')
VARID ('p')
VARID ('_')
CHAR (')')
CHAR ('=')
VARID ('p')
COMMENT ('-- get List of elements that must be turned off when assumption is true/false')
VARID ('toClear')
VARID ('board')
TRUE ('true')
CHAR ('(')
CONID ('IS')
VARID ('p')
VARID ('x')
CHAR (')')
CHAR ('=')
VARID ('filter')
CHAR ('(')
VARID ('x')
SOMEOP ('!=')
CHAR (')')
CHAR ('(')
VARID ('getc')
VARID ('board')
VARID ('p')
CHAR (')')
VARID ('toClear')
VARID ('board')
FALSE ('false')
CHAR ('(')
CONID ('IS')
VARID ('p')
VARID ('x')
CHAR (')')
CHAR ('=')
CHAR ('[')
VARID ('x')
CHAR (']')
VARID ('toClear')
VARID ('board')
TRUE ('true')
CHAR ('(')
CONID ('ISNOT')
VARID ('p')
VARID ('x')
CHAR (')')
CHAR ('=')
CHAR ('[')
VARID ('x')
CHAR (']')
VARID ('toClear')
VARID ('board')
FALSE ('false')
CHAR ('(')
CONID ('ISNOT')
VARID ('p')
VARID ('x')
CHAR (')')
CHAR ('=')
VARID ('filter')
CHAR ('(')
VARID ('x')
SOMEOP ('!=')
CHAR (')')
CHAR ('(')
VARID ('getc')
VARID ('board')
VARID ('p')
CHAR (')')
COMMENT ('-- look for assumptions whose implications contradict themselves')
VARID ('chain')
VARID ('board')
VARID ('paths')
CHAR ('=')
CHAR ('[')
VARID ('solution')
VARID ('a')
CHAR ('(')
VARID ('head')
VARID ('cs')
CHAR (')')
CHAR ('(')
VARID ('reverse')
VARID ('cs')
CHAR (')')
CHAR ('|')
CHAR ('(')
VARID ('a')
CHAR (',')
VARID ('css')
CHAR (')')
GETS ('<-')
VARID ('paths')
CHAR (',')
VARID ('cs')
GETS ('<-')
VARID ('take')
INTCONST ('1')
CHAR ('[')
VARID ('cs')
CHAR ('|')
VARID ('cs')
GETS ('<-')
VARID ('css')
CHAR (',')
VARID ('contradicts')
VARID ('a')
CHAR ('(')
VARID ('head')
VARID ('cs')
CHAR (')')
CHAR (']')
CHAR (']')
WHERE ('where')
VARID ('solution')
VARID ('a')
VARID ('c')
VARID ('cs')
CHAR ('=')
VARID ('turnoff')
CHAR ('(')
VARID ('aPos')
VARID ('a')
CHAR (')')
CHAR ('(')
VARID ('toClear')
VARID ('board')
FALSE ('false')
VARID ('a')
CHAR (')')
VARID ('reason')
WHERE ('where')
VARID ('reason')
CHAR ('=')
STRCONST ('"Assumption "')
SOMEOP ('++')
VARID ('show')
VARID ('a')
SOMEOP ('++')
STRCONST ('" implies "')
SOMEOP ('++')
VARID ('show')
VARID ('c')
SOMEOP ('++')
STRCONST ('"\n\t"')
SOMEOP ('++')
VARID ('showcs')
VARID ('cs')
SOMEOP ('++')
STRCONST ('"\n\t"')
SOMEOP ('++')
STRCONST ('"Therefore, "')
SOMEOP ('++')
VARID ('show')
VARID ('a')
SOMEOP ('++')
STRCONST ('" must be false."')
COMMENT ('-- look for an assumption that yields to contradictory implications')
COMMENT ('-- this assumption must be false')
VARID ('chainContra')
VARID ('board')
VARID ('paths')
CHAR ('=')
CHAR ('[')
VARID ('solution')
VARID ('a')
CHAR ('(')
VARID ('reverse')
VARID ('pro')
CHAR (')')
CHAR ('(')
VARID ('reverse')
VARID ('contra')
CHAR (')')
CHAR ('|')
CHAR ('(')
VARID ('a')
CHAR (',')
VARID ('css')
CHAR (')')
GETS ('<-')
VARID ('paths')
CHAR (',')
COMMENT ('-- FOR ALL assumptions "a" with list of conclusions "css"')
CHAR ('(')
VARID ('pro')
CHAR (',')
VARID ('contra')
CHAR (')')
GETS ('<-')
VARID ('take')
INTCONST ('1')
CHAR ('[')
CHAR ('(')
VARID ('pro')
CHAR (',')
VARID ('contra')
CHAR (')')
CHAR ('|')
VARID ('pro')
GETS ('<-')
CHAR ('(')
VARID ('uniqBy')
CHAR ('(')
VARID ('using')
VARID ('head')
CHAR (')')
CHAR ('.')
VARID ('sortBy')
CHAR ('(')
VARID ('comparing')
VARID ('head')
CHAR (')')
CHAR (')')
VARID ('css')
CHAR (',')
COMMENT ('-- FOR ALL conclusion chains "pro"')
VARID ('c')
CHAR ('=')
VARID ('head')
VARID ('pro')
CHAR (',')
COMMENT ('-- LET "c" BE the final conclusion')
VARID ('contra')
GETS ('<-')
VARID ('take')
INTCONST ('1')
CHAR ('(')
VARID ('filter')
CHAR ('(')
CHAR ('(')
VARID ('contradicts')
VARID ('c')
CHAR (')')
CHAR ('.')
VARID ('head')
CHAR (')')
VARID ('css')
CHAR (')')
COMMENT ('-- THE FIRST conclusion that contradicts c')
CHAR (']')
CHAR (']')
WHERE ('where')
VARID ('solution')
VARID ('a')
VARID ('pro')
VARID ('con')
CHAR ('=')
VARID ('turnoff')
CHAR ('(')
VARID ('aPos')
VARID ('a')
CHAR (')')
CHAR ('(')
VARID ('toClear')
VARID ('board')
FALSE ('false')
VARID ('a')
CHAR (')')
VARID ('reason')
WHERE ('where')
VARID ('reason')
CHAR ('=')
CHAR ('(')
STRCONST ('"assumption "')
SOMEOP ('++')
VARID ('show')
VARID ('a')
SOMEOP ('++')
STRCONST ('" leads to contradictory conclusions\n\t"')
SOMEOP ('++')
VARID ('showcs')
VARID ('pro')
SOMEOP ('++')
STRCONST ('"\n\t"')
SOMEOP ('++')
VARID ('showcs')
VARID ('con')
CHAR (')')
COMMENT ('-- look for a common implication c of some assumptions ai, where at least 1 ai is true')
COMMENT ('-- so that (a0 OR a1 OR a2 OR ...) IMPLIES c')
COMMENT ('-- For all cells pi in same container that have x as candidate, we can construct (p0==x OR p1==x OR ... OR pi==x)')
COMMENT ('-- For a cell p with candidates ci, we can construct (p==c0 OR p==c1)')
VARID ('cellRegionChain')
VARID ('board')
VARID ('paths')
CHAR ('=')
CHAR ('[')
VARID ('solution')
VARID ('b')
VARID ('as')
CHAR ('(')
VARID ('map')
VARID ('head')
VARID ('os')
CHAR (')')
CHAR ('|')
VARID ('as')
GETS ('<-')
VARID ('cellas')
SOMEOP ('++')
VARID ('regionas')
CHAR (',')
COMMENT ('-- one of as must be true')
VARID ('iss')
CHAR ('=')
VARID ('filter')
CHAR ('(')
CHAR ('(')
SOMEOP ('elem')
VARID ('as')
CHAR (')')
CHAR ('.')
VARID ('fst')
CHAR (')')
VARID ('paths')
CHAR (',')
COMMENT ('-- the implications for as')
CHAR ('(')
VARID ('a')
CHAR (',')
VARID ('ass')
CHAR (')')
GETS ('<-')
VARID ('take')
INTCONST ('1')
VARID ('iss')
CHAR (',')
COMMENT ('-- implications for first assumption')
VARID ('fs')
GETS ('<-')
CHAR ('(')
VARID ('uniqBy')
CHAR ('(')
VARID ('using')
VARID ('head')
CHAR (')')
CHAR ('.')
VARID ('sortBy')
CHAR ('(')
VARID ('comparing')
VARID ('head')
CHAR (')')
CHAR (')')
VARID ('ass')
CHAR (',')
VARID ('b')
CHAR ('=')
VARID ('head')
VARID ('fs')
CHAR (',')
COMMENT ('-- final conclusions of first assumption')
VARID ('os')
CHAR ('=')
CHAR ('[')
VARID ('fs')
CHAR (']')
SOMEOP (':')
VARID ('map')
CHAR ('(')
VARID ('take')
INTCONST ('1')
CHAR ('.')
VARID ('filter')
CHAR ('(')
CHAR ('(')
VARID ('b')
SOMEOP ('==')
CHAR (')')
CHAR ('.')
VARID ('head')
CHAR (')')
CHAR ('.')
VARID ('snd')
CHAR (')')
CHAR ('(')
VARID ('tail')
VARID ('iss')
CHAR (')')
CHAR (',')
COMMENT ('-- look for implications with same conclusion')
VARID ('all')
CHAR ('(')
CHAR ('[')
CHAR (']')
SOMEOP ('!=')
CHAR (')')
VARID ('os')
CHAR (']')
WHERE ('where')
VARID ('cellas')
CHAR ('=')
CHAR ('[')
VARID ('map')
CHAR ('(')
VARID ('p')
SOMEOP ('IS')
CHAR (')')
VARID ('candidates')
CHAR ('|')
CHAR ('(')
VARID ('p')
CHAR (',')
VARID ('candidates')
SOMEOP ('@')
CHAR ('(')
VARID ('_')
SOMEOP (':')
VARID ('_')
SOMEOP (':')
VARID ('_')
CHAR (')')
CHAR (')')
GETS ('<-')
VARID ('board')
CHAR (']')
VARID ('regionas')
CHAR ('=')
CHAR ('[')
VARID ('map')
CHAR ('(')
SOMEOP ('IS')
VARID ('e')
CHAR (')')
VARID ('ps')
CHAR ('|')
VARID ('region')
GETS ('<-')
VARID ('map')
CHAR ('(')
VARID ('map')
CHAR ('(')
VARID ('getf')
VARID ('board')
CHAR (')')
CHAR (')')
CHAR ('(')
VARID ('allrows')
SOMEOP ('++')
VARID ('allcols')
SOMEOP ('++')
VARID ('allboxs')
CHAR (')')
CHAR (',')
VARID ('e')
GETS ('<-')
VARID ('elements')
CHAR (',')
VARID ('ps')
CHAR ('=')
VARID ('map')
VARID ('fst')
CHAR ('(')
VARID ('filter')
CHAR ('(')
CHAR ('(')
VARID ('e')
SOMEOP ('elem')
CHAR (')')
CHAR ('.')
VARID ('snd')
CHAR (')')
VARID ('region')
CHAR (')')
CHAR (',')
VARID ('length')
VARID ('ps')
SOMEOP ('>')
INTCONST ('1')
CHAR (']')
VARID ('solution')
VARID ('b')
VARID ('as')
VARID ('oss')
CHAR ('=')
VARID ('turnoff')
CHAR ('(')
VARID ('aPos')
VARID ('b')
CHAR (')')
CHAR ('(')
VARID ('toClear')
VARID ('board')
TRUE ('true')
VARID ('b')
CHAR (')')
VARID ('reason')
WHERE ('where')
VARID ('reason')
CHAR ('=')
STRCONST ('"all of the assumptions "')
SOMEOP ('++')
VARID ('joined')
STRCONST ('", "')
CHAR ('(')
VARID ('map')
VARID ('show')
VARID ('as')
CHAR (')')
SOMEOP ('++')
STRCONST ('" imply "')
SOMEOP ('++')
VARID ('show')
VARID ('b')
SOMEOP ('++')
STRCONST ('"\n\t"')
SOMEOP ('++')
VARID ('joined')
STRCONST ('"\n\t"')
CHAR ('(')
VARID ('map')
CHAR ('(')
VARID ('showcs')
CHAR ('.')
VARID ('reverse')
CHAR (')')
VARID ('oss')
CHAR (')')
SOMEOP ('++')
STRCONST ('"\n\t"')
SOMEOP ('++')
STRCONST ('"One of them must be true, so "')
SOMEOP ('++')
VARID ('show')
VARID ('b')
SOMEOP ('++')
STRCONST ('" must be true."')
COMMENT ('{-\n    For some functions, we need a data structure like\n        [ (Assumption, [[Assumption]]) ]\n    i.e. a list of possible assumptions including all implied assumptions.\n    The implied assumptions shall at best be stored in reverse order for easier selection of:\n    - self-contradicting assumptions,\n    - everything that follows from a given assumption (map (map head) [[a]])\n    -...\n-}')
DOCUMENTATION ('--- List of all assumptions for a given board (Brett)')
VARID ('assumptions')
DCOLON ('::')
CONID ('Brett')
ARROW ('->')
CHAR ('[')
CONID ('Assumption')
CHAR (']')
VARID ('assumptions')
VARID ('board')
CHAR ('=')
CHAR ('[')
VARID ('a')
CHAR ('|')
CHAR ('(')
VARID ('p')
CHAR (',')
VARID ('cs')
CHAR (')')
GETS ('<-')
VARID ('board')
CHAR (',')
CHAR ('!')
CHAR ('(')
VARID ('single')
VARID ('cs')
CHAR (')')
CHAR (',')
VARID ('a')
GETS ('<-')
VARID ('map')
CHAR ('(')
CONID ('ISNOT')
VARID ('p')
CHAR (')')
VARID ('cs')
SOMEOP ('++')
VARID ('map')
CHAR ('(')
CONID ('IS')
VARID ('p')
CHAR (')')
VARID ('cs')
CHAR (']')
VARID ('consequences')
DCOLON ('::')
CONID ('Brett')
ARROW ('->')
CHAR ('[')
CONID ('Assumption')
CHAR (']')
ARROW ('->')
CHAR ('[')
CHAR ('[')
CONID ('Assumption')
CHAR (']')
CHAR (']')
VARID ('consequences')
VARID ('board')
VARID ('as')
CHAR ('=')
VARID ('map')
CHAR ('(')
VARID ('conseq')
VARID ('board')
CHAR (')')
VARID ('as')
VARID ('acstree')
DCOLON ('::')
CONID ('Brett')
ARROW ('->')
CONID ('TreeMap')
CONID ('Assumption')
CHAR ('[')
CONID ('Assumption')
CHAR (']')
VARID ('acstree')
VARID ('board')
CHAR ('=')
QUALIFIER ('TM')
VARID ('fromList')
CHAR ('(')
VARID ('zip')
VARID ('as')
VARID ('cs')
CHAR (')')
WHERE ('where')
VARID ('as')
CHAR ('=')
VARID ('assumptions')
VARID ('board')
VARID ('cs')
CHAR ('=')
VARID ('consequences')
VARID ('board')
VARID ('as')
COMMENT ('-- bypass maybe on tree lookup')
VARID ('find')
DCOLON ('::')
CONID ('TreeMap')
CONID ('Assumption')
CHAR ('[')
CONID ('Assumption')
CHAR (']')
ARROW ('->')
CONID ('Assumption')
ARROW ('->')
CHAR ('[')
CONID ('Assumption')
CHAR (']')
VARID ('find')
VARID ('t')
VARID ('a')
CHAR ('|')
CONID ('Just')
VARID ('cs')
GETS ('<-')
VARID ('t')
CHAR ('.')
VARID ('lookup')
VARID ('a')
CHAR ('=')
VARID ('cs')
CHAR ('|')
VARID ('otherwise')
CHAR ('=')
VARID ('error')
CHAR ('(')
STRCONST ('"no consequences for "')
SOMEOP ('++')
VARID ('show')
VARID ('a')
CHAR (')')
COMMENT ('-- for performance reasons, we confine ourselves to implication chains of length 20 per assumption')
VARID ('mkPaths')
DCOLON ('::')
CONID ('TreeMap')
CONID ('Assumption')
CHAR ('[')
CONID ('Assumption')
CHAR (']')
ARROW ('->')
CHAR ('[')
CHAR ('(')
CONID ('Assumption')
CHAR (',')
CHAR ('[')
CHAR ('[')
CONID ('Assumption')
CHAR (']')
CHAR (']')
CHAR (')')
CHAR (']')
VARID ('mkPaths')
VARID ('acst')
CHAR ('=')
VARID ('map')
VARID ('impl')
CHAR ('(')
VARID ('keys')
VARID ('acst')
CHAR (')')
COMMENT ('-- {[a1], [a2], [a3] ]')
WHERE ('where')
COMMENT ('-- [Assumption] -> [(a, [chains, ordered by length]')
VARID ('impl')
VARID ('a')
CHAR ('=')
CHAR ('(')
VARID ('a')
CHAR (',')
VARID ('impls')
CHAR ('[')
CHAR ('[')
VARID ('a')
CHAR (']')
CHAR (']')
CHAR (')')
VARID ('impls')
VARID ('ns')
CHAR ('=')
CHAR ('(')
VARID ('take')
INTCONST ('1000')
SOMEOP ('•')
VARID ('concat')
SOMEOP ('•')
VARID ('takeUntil')
VARID ('null')
SOMEOP ('•')
VARID ('iterate')
VARID ('expandchain')
CHAR (')')
VARID ('ns')
COMMENT ('-- expandchain :: [[Assumption]] -> [[Assumption]]')
VARID ('expandchain')
VARID ('css')
CHAR ('=')
CHAR ('[')
CHAR ('(')
VARID ('n')
SOMEOP (':')
VARID ('a')
SOMEOP (':')
VARID ('as')
CHAR (')')
CHAR ('|')
CHAR ('(')
VARID ('a')
SOMEOP (':')
VARID ('as')
CHAR (')')
GETS ('<-')
VARID ('css')
CHAR (',')
COMMENT ('-- list of assumptions')
VARID ('n')
GETS ('<-')
VARID ('find')
VARID ('acst')
VARID ('a')
CHAR (',')
COMMENT ('-- consequences of a')
VARID ('n')
SOMEOP ('notElem')
VARID ('as')
COMMENT ('-- avoid loops')
CHAR (']')
COMMENT ('-- uni (a:as) = a : uni (filter ((head a !=) • head) as)')
COMMENT ('-- uni [] = empty')
COMMENT ('-- empty = []')
COMMENT ('-- ------------------ SOLVE A SUDOKU --------------------------')
COMMENT ('-- Apply all available strategies until nothing changes anymore')
COMMENT ('-- Strategy functions are supposed to return a list of')
COMMENT ('-- functions, which, when applied to a board, give a changed board.')
COMMENT ('-- When a strategy does not find anything to alter,')
COMMENT ('-- it returns [], and the next strategy can be tried.')
VARID ('solve')
VARID ('b')
CHAR ('|')
VARID ('all')
CHAR ('(')
VARID ('single')
CHAR ('.')
VARID ('snd')
CHAR (')')
VARID ('b')
CHAR ('=')
VARID ('result')
STRCONST ('"Solved"')
VARID ('b')
CHAR ('|')
VARID ('any')
CHAR ('(')
CHAR ('(')
CHAR ('[')
CHAR (']')
SOMEOP ('==')
CHAR (')')
CHAR ('.')
VARID ('snd')
CHAR (')')
VARID ('b')
CHAR ('=')
VARID ('result')
STRCONST ('"not solvable"')
VARID ('b')
CHAR ('|')
VARID ('res')
SOMEOP ('@')
CHAR ('(')
VARID ('_')
SOMEOP (':')
VARID ('_')
CHAR (')')
GETS ('<-')
VARID ('reduce')
VARID ('b')
CHAR ('=')
VARID ('apply')
VARID ('b')
VARID ('res')
SOMEOP ('>>=')
VARID ('solve')
COMMENT ('-- compute smallest candidate sets')
COMMENT ('-- comment "candidate sets are up to date" = ()')
CHAR ('|')
VARID ('res')
SOMEOP ('@')
CHAR ('(')
VARID ('_')
SOMEOP (':')
VARID ('_')
CHAR (')')
GETS ('<-')
VARID ('hiddenSingle')
VARID ('b')
CHAR ('=')
VARID ('apply')
VARID ('b')
VARID ('res')
SOMEOP ('>>=')
VARID ('solve')
COMMENT ('-- find HIDDEN SINGLES')
COMMENT ('-- comment "no more hidden singles" = ()')
CHAR ('|')
VARID ('res')
SOMEOP ('@')
CHAR ('(')
VARID ('_')
SOMEOP (':')
VARID ('_')
CHAR (')')
GETS ('<-')
VARID ('intersections')
VARID ('b')
CHAR ('=')
VARID ('apply')
VARID ('b')
VARID ('res')
SOMEOP ('>>=')
VARID ('solve')
COMMENT ('-- find locked candidates')
COMMENT ('-- comment "no more intersections" = ()')
CHAR ('|')
VARID ('res')
SOMEOP ('@')
CHAR ('(')
VARID ('_')
SOMEOP (':')
VARID ('_')
CHAR (')')
GETS ('<-')
VARID ('nakedPair')
INTCONST ('2')
VARID ('b')
CHAR ('=')
VARID ('apply')
VARID ('b')
VARID ('res')
SOMEOP ('>>=')
VARID ('solve')
COMMENT ('-- find NAKED PAIRS, TRIPLES or QUADRUPELS')
COMMENT ('-- comment "no more naked pairs" = ()')
CHAR ('|')
VARID ('res')
SOMEOP ('@')
CHAR ('(')
VARID ('_')
SOMEOP (':')
VARID ('_')
CHAR (')')
GETS ('<-')
VARID ('hiddenPair')
INTCONST ('2')
VARID ('b')
CHAR ('=')
VARID ('apply')
VARID ('b')
VARID ('res')
SOMEOP ('>>=')
VARID ('solve')
COMMENT ('-- find HIDDEN PAIRS, TRIPLES or QUADRUPELS')
COMMENT ('-- comment "no more hidden pairs" = ()')
COMMENT ('-- res@(_:_) <- nakedPair 3 b     = apply b res >>= solve       // find NAKED PAIRS, TRIPLES or QUADRUPELS')
COMMENT ('-- | comment "no more naked triples" = ()')
COMMENT ('-- res@(_:_) <- hiddenPair  3 b    = apply b res >>= solve      // find HIDDEN PAIRS, TRIPLES or QUADRUPELS')
COMMENT ('-- | comment "no more hidden triples" = ()')
COMMENT ('-- res@(_:_) <- nakedPair 4 b     = apply b res >>=solve       // find NAKED PAIRS, TRIPLES or QUADRUPELS')
COMMENT ('-- | comment "no more naked quadruples" = ()')
COMMENT ('-- res@(_:_) <- hiddenPair  4 b    = apply b res >>=solve      // find HIDDEN PAIRS, TRIPLES or QUADRUPELS')
COMMENT ('-- | comment "no more hidden quadruples" = ()')
CHAR ('|')
VARID ('res')
SOMEOP ('@')
CHAR ('(')
VARID ('_')
SOMEOP (':')
VARID ('_')
CHAR (')')
GETS ('<-')
VARID ('xyWing')
VARID ('b')
CHAR ('=')
VARID ('apply')
VARID ('b')
VARID ('res')
SOMEOP ('>>=')
VARID ('solve')
COMMENT ('-- find XY WINGS')
COMMENT ('-- comment "no more xy wings"       = ()')
CHAR ('|')
VARID ('res')
SOMEOP ('@')
CHAR ('(')
VARID ('_')
SOMEOP (':')
VARID ('_')
CHAR (')')
GETS ('<-')
VARID ('fish')
INTCONST ('2')
VARID ('b')
CHAR ('=')
VARID ('apply')
VARID ('b')
VARID ('res')
SOMEOP ('>>=')
VARID ('solve')
COMMENT ('-- find 2-FISH')
COMMENT ('-- comment "no more x-wings"        = ()')
COMMENT ('-- res@(_:_) <- fish 3 b            = apply b res >>=solve      // find 3-FISH')
COMMENT ('-- | comment "no more swordfish"      = ()')
COMMENT ('-- res@(_:_) <- fish 4 b            = apply b res >>=solve      // find 4-FISH')
COMMENT ('-- | comment "no more jellyfish"      = ()')
COMMENT ('-- | comment pcomment                 = ()')
CHAR ('|')
VARID ('res')
SOMEOP ('@')
CHAR ('(')
VARID ('_')
SOMEOP (':')
VARID ('_')
CHAR (')')
GETS ('<-')
VARID ('chain')
VARID ('b')
VARID ('paths')
CHAR ('=')
VARID ('apply')
VARID ('b')
CHAR ('(')
VARID ('take')
INTCONST ('9')
VARID ('res')
CHAR (')')
SOMEOP ('>>=')
VARID ('solve')
COMMENT ('-- find forcing chains')
CHAR ('|')
VARID ('res')
SOMEOP ('@')
CHAR ('(')
VARID ('_')
SOMEOP (':')
VARID ('_')
CHAR (')')
GETS ('<-')
VARID ('cellRegionChain')
VARID ('b')
VARID ('paths')
CHAR ('=')
VARID ('apply')
VARID ('b')
CHAR ('(')
VARID ('take')
INTCONST ('9')
VARID ('res')
CHAR (')')
SOMEOP ('>>=')
VARID ('solve')
COMMENT ('-- find common conclusion for true assumption')
CHAR ('|')
VARID ('res')
SOMEOP ('@')
CHAR ('(')
VARID ('_')
SOMEOP (':')
VARID ('_')
CHAR (')')
GETS ('<-')
VARID ('chainContra')
VARID ('b')
VARID ('paths')
CHAR ('=')
VARID ('apply')
VARID ('b')
CHAR ('(')
VARID ('take')
INTCONST ('9')
VARID ('res')
CHAR (')')
SOMEOP ('>>=')
VARID ('solve')
COMMENT ('-- find assumptions that allow to infer both a and !a')
COMMENT ('-- comment "consistent conclusions only"       = ()')
CHAR ('|')
VARID ('otherwise')
CHAR ('=')
VARID ('result')
STRCONST ('"ambiguous"')
VARID ('b')
WHERE ('where')
VARID ('apply')
VARID ('brd')
VARID ('fs')
CHAR ('=')
VARID ('foldM')
CHAR ('(')
CHAR ('\')
VARID ('b')
CHAR ('\')
VARID ('f')
ARROW ('->')
VARID ('f')
VARID ('b')
CHAR (')')
VARID ('brd')
VARID ('fs')
VARID ('paths')
CHAR ('=')
VARID ('mkPaths')
CHAR ('(')
VARID ('acstree')
VARID ('b')
CHAR (')')
COMMENT ('-- pcomment = show (length paths) ++ " assumptions with " ++ show (fold (+) 0 (map (length <~ snd) paths))')
COMMENT ('--    ++ " implication chains"')
COMMENT ('-- comment com = do stderr << com << "\n" for false')
COMMENT ('-- log com     = do stderr << com << "\n" for true')
DOCUMENTATION ('--- turn a string into a row')
VARID ('mkrow')
DCOLON ('::')
CONID ('String')
ARROW ('->')
CHAR ('[')
CONID ('Zelle')
CHAR (']')
VARID ('mkrow')
VARID ('s')
CHAR ('=')
VARID ('mkrow1')
VARID ('xs')
WHERE ('where')
VARID ('xs')
CHAR ('=')
VARID ('s')
SOMEOP ('++')
STRCONST ('"---------"')
COMMENT ('-- make sure at least 9 elements')
VARID ('mkrow1')
VARID ('xs')
CHAR ('=')
CHAR ('(')
VARID ('take')
INTCONST ('9')
SOMEOP ('•')
VARID ('filter')
CHAR ('(')
CHAR ('[')
CHAR (']')
SOMEOP ('!=')
CHAR (')')
SOMEOP ('•')
VARID ('map')
VARID ('f')
SOMEOP ('•')
VARID ('unpacked')
CHAR (')')
VARID ('xs')
VARID ('f')
VARID ('x')
CHAR ('|')
VARID ('x')
SOMEOP ('>=')
CHRCONST (''1'')
SOMEOP ('&&')
VARID ('x')
SOMEOP ('<=')
CHRCONST (''9'')
CHAR ('=')
CHAR ('[')
VARID ('ord')
VARID ('x')
CHAR ('-')
VARID ('ord')
CHRCONST (''0'')
CHAR (']')
CHAR ('|')
VARID ('x')
SOMEOP ('==')
CHRCONST ('' '')
CHAR ('=')
CHAR ('[')
CHAR (']')
COMMENT ('-- ignored')
CHAR ('|')
VARID ('otherwise')
CHAR ('=')
VARID ('elements')
VARID ('main')
CHAR ('[')
STRCONST ('"-h"')
CHAR (']')
CHAR ('=')
VARID ('main')
CHAR ('[')
CHAR (']')
VARID ('main')
CHAR ('[')
STRCONST ('"-help"')
CHAR (']')
CHAR ('=')
VARID ('main')
CHAR ('[')
CHAR (']')
VARID ('main')
CHAR ('[')
CHAR (']')
CHAR ('=')
DO ('do')
VARID ('mapM_')
VARID ('stderr')
CHAR ('.')
VARID ('println')
CHAR ('[')
STRCONST ('"usage: java Sudoku file ..."')
CHAR (',')
STRCONST ('"       java Sudoku position"')
CHAR (',')
STRCONST ('"where position is a 81 char string consisting of digits"')
CHAR (',')
STRCONST ('"One can get such a string by going to"')
CHAR (',')
STRCONST ('"http://www.sudokuoftheday.com/pages/s-o-t-d.php"')
CHAR (',')
STRCONST ('"Right click on the puzzle and open it in new tab"')
CHAR (',')
STRCONST ('"Copy the 81 digits from the URL in the address field of your browser."')
CHAR (',')
STRCONST ('""')
CHAR (',')
STRCONST ('"There is also a file with hard sudokus in examples/top95.txt\n"')
CHAR (']')
VARID ('return')
CHAR ('(')
CHAR (')')
VARID ('main')
CHAR ('[')
VARID ('s')
SOMEOP ('@')
REGEXP ('´^[0-9\W]{81}')
CHAR (']')
CHAR ('=')
VARID ('solve')
VARID ('board')
SOMEOP ('>>')
VARID ('return')
CHAR ('(')
CHAR (')')
WHERE ('where')
VARID ('board')
CHAR ('=')
VARID ('zip')
VARID ('positions')
VARID ('felder')
VARID ('felder')
CHAR ('=')
VARID ('decode')
VARID ('s')
VARID ('main')
VARID ('files')
CHAR ('=')
VARID ('forM_')
VARID ('files')
VARID ('sudoku')
WHERE ('where')
VARID ('sudoku')
VARID ('file')
CHAR ('=')
DO ('do')
VARID ('br')
GETS ('<-')
VARID ('openReader')
VARID ('file')
VARID ('lines')
GETS ('<-')
QUALIFIER ('BufferedReader')
VARID ('getLines')
VARID ('br')
VARID ('bs')
GETS ('<-')
VARID ('process')
VARID ('lines')
VARID ('ss')
GETS ('<-')
VARID ('mapM')
CHAR ('(')
CHAR ('\')
VARID ('b')
ARROW ('->')
VARID ('print')
STRCONST ('"Puzzle: "')
SOMEOP ('>>')
VARID ('printb')
VARID ('b')
SOMEOP ('>>')
VARID ('solve')
VARID ('b')
CHAR (')')
VARID ('bs')
VARID ('println')
CHAR ('(')
STRCONST ('"Euler: "')
SOMEOP ('++')
VARID ('show')
CHAR ('(')
VARID ('sum')
CHAR ('(')
VARID ('map')
VARID ('res012')
VARID ('ss')
CHAR (')')
CHAR (')')
CHAR (')')
VARID ('return')
CHAR ('(')
CHAR (')')
COMMENT ('-- "--3-" => [1..9, 1..9, [3], 1..9]')
VARID ('decode')
VARID ('s')
CHAR ('=')
VARID ('map')
VARID ('candi')
CHAR ('(')
VARID ('unpacked')
VARID ('s')
CHAR (')')
WHERE ('where')
VARID ('candi')
VARID ('c')
CHAR ('|')
VARID ('c')
SOMEOP ('>=')
CHRCONST (''1'')
SOMEOP ('&&')
VARID ('c')
SOMEOP ('<=')
CHRCONST (''9'')
CHAR ('=')
CHAR ('[')
CHAR ('(')
VARID ('ord')
VARID ('c')
CHAR ('-')
VARID ('ord')
CHRCONST (''0'')
CHAR (')')
CHAR (']')
CHAR ('|')
VARID ('otherwise')
CHAR ('=')
VARID ('elements')
VARID ('process')
CHAR ('[')
CHAR (']')
CHAR ('=')
VARID ('return')
CHAR ('[')
CHAR (']')
VARID ('process')
CHAR ('(')
VARID ('s')
SOMEOP (':')
VARID ('ss')
CHAR (')')
CHAR ('|')
VARID ('length')
VARID ('s')
SOMEOP ('==')
INTCONST ('81')
CHAR ('=')
VARID ('consider')
VARID ('b1')
CHAR ('|')
VARID ('length')
VARID ('s')
SOMEOP ('==')
INTCONST ('9')
CHAR (',')
VARID ('length')
VARID ('acht')
SOMEOP ('==')
INTCONST ('8')
CHAR (',')
VARID ('all')
CHAR ('(')
CHAR ('(')
INTCONST ('9')
SOMEOP ('==')
CHAR (')')
SOMEOP ('•')
VARID ('length')
CHAR (')')
VARID ('acht')
CHAR ('=')
VARID ('consider')
VARID ('b2')
CHAR ('|')
VARID ('otherwise')
CHAR ('=')
DO ('do')
VARID ('stderr')
CHAR ('.')
VARID ('println')
CHAR ('(')
STRCONST ('"skipped line: "')
SOMEOP ('++')
VARID ('s')
CHAR (')')
VARID ('process')
VARID ('ss')
WHERE ('where')
VARID ('acht')
CHAR ('=')
VARID ('take')
INTCONST ('8')
VARID ('ss')
VARID ('neun')
CHAR ('=')
VARID ('fold')
CHAR ('(')
SOMEOP ('++')
CHAR (')')
STRCONST ('""')
CHAR ('(')
VARID ('s')
SOMEOP (':')
VARID ('acht')
CHAR (')')
VARID ('b1')
CHAR ('=')
VARID ('zip')
VARID ('positions')
CHAR ('(')
VARID ('decode')
VARID ('s')
CHAR (')')
VARID ('b2')
CHAR ('=')
VARID ('zip')
VARID ('positions')
CHAR ('(')
VARID ('decode')
VARID ('neun')
CHAR (')')
VARID ('consider')
VARID ('b')
CHAR ('=')
DO ('do')
COMMENT ('-- print "Puzzle: "')
COMMENT ('-- printb b')
VARID ('bs')
GETS ('<-')
VARID ('process')
VARID ('ss')
VARID ('return')
CHAR ('(')
VARID ('b')
SOMEOP (':')
VARID ('bs')
CHAR (')')